import cv2
import numpy as np
from keras.models import load_model

# Load CNN model
model = load_model("augmented_parking_cnn_model.h5")

# Load image
image_path = "parking_image.png.png"
img = cv2.imread(image_path)
if img is None:
    raise FileNotFoundError(f"Could not load image: {image_path}")

orig = img.copy()

# Example short slot list (replace with your full list)
slots = [
    (125,46,48,21),
(128,73,49,16),
(128,99,52,21),
(132,121,47,17),
(131,146,50,14),
(134,166,46,21),
(133,196,47,16),
(128,213,51,19),
(130,237,41,20),
(78,235,43,20),
(81,262,48,19),
(131,263,45,15),
(83,283,39,16),
(128,283,47,20),
(82,304,42,20),
(131,305,49,16),
(81,327,50,24),
(136,326,48,23),
(72,355,54,24),
(136,357,47,19),
(83,427,49,22),
(133,430,43,18),
(134,452,43,18),
(83,454,50,18),
(138,473,40,17),
(87,476,46,14),
(136,494,49,19),
(83,498,47,17),
(130,516,53,21),
(87,521,44,19),
(88,542,42,14),
(137,540,46,18),
(84,562,47,24),
(135,563,46,18),
(86,588,41,19),
(138,587,42,19),
(83,611,44,17),
(129,610,56,19),
(84,633,45,18),
(137,634,42,16),
(87,655,45,19),
(137,660,42,16),
(88,678,46,15),
(83,699,43,20),
(141,676,43,21),
(134,701,53,20),
(86,722,42,21),
(136,726,51,14),
(230,50,60,14),
(302,53,51,15),
(235,72,53,16),
(301,67,50,18),
(234,96,55,16),
(303,100,54,17),
(241,119,51,16),
(297,124,61,14),
(245,142,49,22),
(296,145,61,9),
(239,166,53,18),
(296,172,55,17),
(244,191,49,20),
(297,198,50,12),
(242,214,48,13),
(295,219,59,12),
(248,236,48,18),
(297,240,52,14),
(250,256,42,22),
(294,261,54,11),
(241,279,56,18),
(298,281,54,14),
(249,305,44,14),
(302,303,51,20),
(247,327,47,20),
(300,328,47,15),
(251,352,38,18),
(295,352,58,21),
(246,374,46,18),
(298,378,47,15),
(249,422,45,21),
(299,427,47,19),
(250,448,45,15),
(302,450,43,13),
(255,464,42,24),
(299,471,53,17),
(246,497,50,15),
(302,494,49,18),
(246,515,48,19),
(298,520,52,13),
(246,541,51,20),
(302,541,56,11),
(246,564,52,19),
(302,563,47,12),
(254,587,42,13),
(302,583,57,17),
(253,607,48,17),
(305,606,57,16),
(250,627,55,23),
(309,626,51,17),
(242,654,60,18),
(305,654,55,18),
(244,676,56,16),
(307,681,50,11),
(251,695,48,22),
(307,702,51,14),
(254,724,49,15),
(309,724,47,12),
(405,18,46,23),
(464,35,42,16),
(412,59,43,24),
(464,71,49,21),
(406,106,47,20),
(463,109,49,27),
(411,141,50,19),
(465,141,52,17),
(415,167,42,16),
(466,165,50,20),
(409,190,47,14),
(465,189,55,16),
(418,210,42,12),
(465,207,48,16),
(409,253,54,18),
(458,256,63,17),
(412,280,43,15),
(462,280,50,19),
(408,300,49,22),
(413,322,46,24),
(401,346,59,25),
(408,374,46,20),
(465,299,56,15),
(462,325,50,18),
(463,352,55,18),
(466,375,44,15),
(417,424,46,17),
(422,448,38,16),
(409,466,53,21),
(411,491,55,21),
(414,517,53,19),
(418,538,47,21),
(420,561,45,17),
(421,583,44,18),
(417,610,49,13),
(417,627,49,17),
(419,647,47,18),
(416,674,50,15),
(416,694,50,17),
(417,716,48,26),
(472,427,44,16),
(465,449,51,18),
(467,470,51,14),
(471,493,42,13),
(472,509,50,21),
(471,532,59,14),
(470,555,51,23),
(470,579,56,19),
(473,598,52,24),
(470,625,46,20),
(470,647,49,20),
(468,668,52,20),
(471,693,50,17),
(471,715,48,20),
(570,66,58,25),
(570,93,58,18),
(572,113,55,19),
(575,133,52,22),
(579,159,51,18),
(578,177,52,23),
(576,201,51,21),
(580,220,46,22),
(571,244,59,24),
(572,272,55,16),
(577,295,49,20),
(579,316,50,25),
(584,341,45,24),
(586,371,41,20),
(580,420,49,21),
(585,445,43,19),
(582,465,47,18),
(582,484,47,20),
(581,507,48,23),
(582,534,49,21),
(588,558,41,18),
(584,580,43,17),
(586,602,42,19),
(585,626,48,16),
(587,651,43,17),
(584,670,49,17),
(588,687,43,23),
(584,718,45,12),
(742,32,44,25),
(801,42,40,19),
(747,68,46,27),
(748,108,48,18),
(745,131,45,22),
(745,158,45,17),
(744,176,49,20),
(741,203,50,19),
(744,227,44,14),
(745,273,49,12),
(749,293,50,19),
(751,314,42,17),
(746,364,43,18),
(751,387,44,14),
(751,408,39,15),
(744,425,53,24),
(745,452,51,14),
(748,474,43,20),
(748,498,42,21),
(752,519,42,20),
(751,545,44,19),
(750,563,47,19),
(750,586,45,15),
(750,609,50,21),
(799,85,51,19),
(801,112,46,18),
(801,135,42,17),
(785,157,0,0),
(796,157,51,15),
(796,178,48,10),
(800,200,47,21),
(801,225,43,12),
(794,266,50,18),
(803,288,45,22),
(800,316,46,16),
(799,360,53,16),
(805,385,41,18),
(799,408,54,18),
(803,432,48,17),
(809,453,45,15),
(793,478,59,15),
(793,503,64,16),
(801,525,46,10),
(800,546,57,13),
(802,564,57,23),
(803,592,55,17),
(803,614,57,9),
(908,53,48,28),
(958,57,58,17),
(911,83,45,24),
(964,81,56,25),
(914,112,50,16),
(966,112,56,19),
(904,134,54,14),
(963,132,60,21),
(901,152,53,21),
(956,149,69,27),
(906,180,51,22),
(967,181,62,17),
(902,202,57,16),
(962,205,57,17),
(905,220,55,23),
(964,227,64,17),
(898,249,63,11),
(968,250,60,10),
(907,261,50,30),
(969,266,45,19),
(966,289,46,16),
(905,289,59,20),
(907,312,56,23),
(968,311,56,24),
(911,360,46,25),
(966,363,43,20),
(911,388,50,16),
(969,386,47,22),
(907,409,51,17),
(966,411,51,17),
(912,429,59,21),
(977,430,47,16),
(921,456,46,17),
(969,454,43,15),
(906,481,47,11),
(965,472,54,18),
(913,499,47,19),
(963,498,58,18),
(906,523,54,16),
(968,523,49,11),
(907,542,53,19),
(975,545,43,17),
(912,560,46,28),
(959,564,65,22),
(912,594,45,14),
(970,595,54,9),
(909,613,49,20),
(964,612,52,17),
(631,69,50,20),
(632,89,49,14),
(627,113,57,17),
(629,133,57,22),
(635,158,55,16),
(641,181,47,14),
(641,199,36,21),
(629,226,48,20),
(632,245,48,24),
(629,269,57,23),
(630,296,50,18),
(629,312,48,27),
(633,340,45,27),
(642,367,38,22),
(633,423,54,20),
(632,444,53,21),
(633,467,61,21),
(633,497,54,6),
(633,511,58,14),
(635,535,50,16),
(637,558,56,15),
(634,581,55,13),
(634,597,57,21),
(636,624,56,18),
(1072,56,53,21),
(1075,80,47,25),
(1075,110,42,18),
(1075,131,50,17),
(1073,151,53,24),
(1126,59,49,22),
(1127,82,52,21),
(1124,108,52,16),
(1126,128,49,22),
(1129,150,44,23),
(1072,178,50,17),
(1131,179,51,17),
(1074,200,47,16),
(1125,202,53,16),
(1076,223,44,18),
(1133,225,58,15),
(1078,266,48,17),
(1125,271,53,13),
(1075,289,52,18),
(1126,292,59,12),
(1080,309,47,20),
(1132,311,50,19),
(1077,356,52,30),
(1131,363,53,20),
(1090,389,35,17),
(1123,382,68,23),
(1075,408,50,15),
(1127,408,57,14),
(1073,429,50,19),
(1129,430,50,17),
(1079,453,49,20),
(1133,453,48,18),
(1081,473,41,24),
(1131,473,49,21),
(1087,504,37,12),
(1124,499,56,16),
(1075,513,54,26),
(1128,520,50,19),
(1080,542,47,19),
(1132,545,51,20),
(1080,564,48,16),
(1130,567,65,20),
(1084,582,45,27),
(1125,588,71,20),
(1078,606,50,21),
(1130,613,65,19),
(1242,52,53,24),
(1241,81,55,22),
(1245,106,47,16),
(1238,126,53,14),
(1238,151,61,15),
(1243,173,47,21),
(1240,196,52,20),
(1240,218,67,19),
(1242,247,47,19),
(1241,258,55,28),
(1239,291,56,14),
(1242,310,53,16),
(1240,358,50,23),
(1247,384,42,19),
(1245,405,54,14),
(1244,430,48,20),
(1247,451,51,17),
(1245,476,48,13),
(1248,497,49,15),
(1249,518,43,16),
(1244,539,45,20),
(1246,561,44,22),
(1251,586,42,23),
(1251,609,52,23),
(1314,85,43,13),
(1316,105,46,17),
(1317,130,46,20),
(1320,153,43,20),
(1311,174,57,21),
(1314,196,54,23),
(1319,218,49,23),
(1313,238,54,24),
(1317,263,52,22),
(1323,282,41,31),
(1311,306,55,27),
(1318,360,58,20),
(1317,388,47,15),
(1319,406,43,24),
(1321,433,41,16),
(1322,450,41,17),
(1319,470,47,29),
(1326,492,41,23),
(1319,520,49,13),
(1318,540,64,15),
(1319,562,45,23),
(1326,588,51,17),
(1322,609,41,21)
]

occupied = 0
free = 0

def classify_slot(roi):
    roi = cv2.resize(roi, (64, 64))
    roi = roi.astype("float32") / 255.0
    roi = np.expand_dims(roi, axis=0)
    pred = model.predict(roi, verbose=0)
    confidence = float(pred[0][0])
    return ("Occupied" if confidence > 0.5 else "Free", confidence)

# Classify each manually defined slot
for idx, (x, y, w, h) in enumerate(slots, start=1):
    if w <= 0 or h <= 0:
        print(f"[!] Skipping slot {idx} with invalid dimensions: (w={w}, h={h})")
        continue
    if y+h > img.shape[0] or x+w > img.shape[1]:
        print(f"[!] Skipping slot {idx} out of bounds: {(x, y, w, h)}")
        continue

    roi = img[y:y+h, x:x+w]
    if roi.size == 0:
        print(f"[!] Skipping empty ROI at slot {idx}")
        continue

    status, confidence = classify_slot(roi)

    color = (0, 0, 255) if status == "Occupied" else (0, 255, 0)
    label = f"{idx} ({status[0]})"
    cv2.rectangle(orig, (x, y), (x+w, y+h), color, 2)
    cv2.putText(orig, label, (x+2, y+15), cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 1)

    if status == "Occupied":
        occupied += 1
    else:
        free += 1

# Overlay counts
cv2.putText(orig, f"Occupied: {occupied}", (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.9, (0, 0, 255), 2)
cv2.putText(orig, f"Free: {free}", (10, 60), cv2.FONT_HERSHEY_SIMPLEX, 0.9, (0, 255, 0), 2)

# Save and display result
cv2.imwrite("output_detected_simple.jpg", orig)
cv2.imshow("Result", orig)
cv2.waitKey(0)
cv2.destroyAllWindows()
